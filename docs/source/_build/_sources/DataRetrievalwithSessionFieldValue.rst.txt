============================================
Data Retrieval with Session Field variables
============================================

Novaland is a study where it is important that the decisions of all participants are taken into account and can be incorporated.
Therefore, we need variables in the project that can be edited and accessed by all participants. This is where session field variables come into play, as they can be accessed by all participants across all apps.

The usage of SESSION_FIELDS has already been explained in #otreeProject.
In this chapter, we will show how all participants can edit certain variables so that other parts of the project can be modified accordingly.

Collecting donations and distributing them evenly among those affected.
=========================================================================

In this chapter, we discuss the example of a fire in Novaland that has affected a portion of the society, causing them to lose some of their savings.
Participants can now donate money to help those affected.
The total amount of money donated will be stored in a variable and divided by the number of affected individuals.

To determine the number of affected individuals, we use an if function to ask each participant whether they are listed in the CSV file as being affected or not. If they are affected, we use a try and except function to test whether the variable has already been queried in the session fields.
This is important because the session field variable may not be defined and attempting to access it can cause an error.
If the variable is undefined, we set it to 1, and if it is defined, we increment the value by 1.
We also refer to participants who were not affected by the fire as "unaffected" in the data.

.. code-block:: console

    class Phase_4_Page_9(Page): # Example Page
        @staticmethod
        def vars_for_template(player: Player):
            if player.participant.CSVFireAffected == 1: # Query whether fire affected
                player.participant.FireAffected = "Ja"
                try: # The query whether the session field already exists
                    player.session.FireAffected = player.session.FireAffected + 1
                except KeyError: # If the session field is not defined yet an error appears, if this error occurs we give the session field the value 1
                    player.session.FireAffected = 1
            if player.participant.CSVFireAffected == 0:
                player.participant.FireAffected = "Nein"

Each time a fire affected participant has now arrived at this point from the app, the value increases by 1.

Donation
___________________

For donations, we use the same process as before, except this time we increment the SESSION FIELD value by the amount of the donation.
To enable participants to donate, we add a donation field to one of our pages.

We create various scenarios in which the bank account plays a crucial role.
To use the bank account, we need to make the variables from the Python backend available to the HTML page:

.. code-block:: console

    @staticmethod
    def js_vars(player: Player): # This is released especially for the JavaScript area.
        return {
            "BankBalance": player.BankBalance,
        }

We will now create a donation field using an input field, which will recognize the input of the participants.
We also limit the field to only accept positive numbers.

.. code-block:: console

    <input id="Donation" type="number" pattern="[0-9]*" step="1" min="0" oninput="this.value = Math.abs(this.value)">

Next, we will add a button that allows reading the entered number and sending it to the backend to be stored.
To do this, we first add the functions to the HTML page.

.. code-block:: console

    <input id="DonationID" type="number" pattern="[0-9]*" step="1" min="0" oninput="this.value = Math.abs(this.value)">
    <br>
    <button class="button" type="button" onclick="DonationFunction()"> Donation</button>    # Button with the function 'DonationFunction()', which is triggered when the button is pressed.

    {% block script %}
    <script>
    BankBalance = js_vars.BankBalance     # We retrieve the account that we have defined above

    function DonationFunction(){
        let DonationValue = document.getElementById("DonationID").value     # With the id 'DonationID', which we have given to the Input Field, we get Value of the input
        liveSend({"Donation": "DonationNumber", "DonationNumber": DonationValue});  # Then we send this value with the Live Send function to the backend
        }

In the backend, we will then access this variable using a live_method:

.. code-block:: console

    @staticmethod
    def live_method(player: Player, data):
        if "Donation" in data:      # If 'Donation' occurs in data then this if function is triggered
            player.Donation = float(data["DonationNumber"])     # Of course, we must have defined the variable 'Donation' in the player model in advance, so that we can now give it a value.
            player.BankBalanceNew = player.BankBalance - player.Donation      # We also define a new Bank Balance value, which reflects the old Bank Balance but with deduction of the donation.


User friendly elements
__________________________

We are adding user-friendly attributes and functions, such as:
    - Placing the input field within a query text
    - Displaying the bank account before and after the donation input
    - Showing a message under the donation input, notifying participants that they do not have enough funds
    - Allowing participants who do not wish to donate to simply click on the "next" button.

.. code-block:: console

    <div id="Delete">
    <p class="p">Donation question:
         I will donate <input id="DonationID" type="number" pattern="[0-9]*" step="1" min="0" oninput="this.value = Math.abs(this.value)"> Novas </p>
        {% if player.BankBalance <= 0 %}<br>If you have <strong>no</strong> funds left, please enter <strong>0</strong> in the field.{% endif %}
                <br>
                <br>
                <button class="button" type="button" onclick="DonationFunction()"> Donation</button>
        </div>
        <br>
        <div id="NotEnough">
        </div>

    {% block script %}
    <script>
    BankBalance = js_vars.BankBalance

    function DonationFunction(){
        let DonationValue = document.getElementById("DonationID").value
        if(!DonationValue){DonationValue = 0}
        liveSend({"Donation": "DonationNumber", "DonationNumber": DonationValue});
        BankBalanceNew = BankBalance - DonationValue;
        if (BankBalanceNew >= 0 || DonationValue == 0) {
            document.getElementById("Delete").innerHTML = "<p class='p'>" + "You donated " + "<strong>" + Donation + " Novas" + "</strong>" + " Novas" + "<br>" + "You still have " +"<strong>" + BankBalanceNew + " Novas" + "</strong>" + " left." + "</p>" + "<button class='button' type='button' onclick='Next()'> Continue </button>";
            document.getElementById("NotEnough").innerHTML = " ";
        }
        if (NachDonation < 0 && DonationValue > 0) {
            document.getElementById("NotEnough").innerHTML = "<p class='p'>" + "You cannot donate more money than you have." + "</p>";
        }
    }


